_start: to label the entry point of a program //汇编程序需要用_start标签来标记程序的入口点，开始标号
.global: declares program labels that are accessable from external programs //标明此段汇编函数可以被外部程序调用，外部程序可见
.section: define a section //每个段开始前必须用.section定义段名，.section + 段号
int: to generate a interrupt //产生中断
int $0x80: generate a system call, with a value of 0x80 //产生0x80软中断，并且具体的中断处理号由eax寄存器给出。其中eax=4时，表示调用write系统函数，write参数由ebx（文件描述符，1表示标准输出stdout）, ecx（开始地址）, edx（字符个数）提前给出。其中eax=1时，表示调用exit函数，exit参数由ebx（0表示正常退出）提前给出。
gdb: break $label+offset: specify breakpoints, specify the location relative to the nearest label. //设置断点，程序标号+标号偏移行
gdb: info registers: see values of all registers. //观察所有寄存器的值
gdb: print: print values of registers, variables. modifier{/x:display in hexadecimal, /d:display in decimal, /t:display in binary} //观察寄存器，变量的值，指定参数可以让数值按指定格式显示
gdb: x: display the values of specific locations. modifier{/nyz:{n:the numbers of fields to display, y:format{c:character,d:decimal,x:hexadecimal},z:size of fields{b:byte,h:16bit(half-word);w:32bit(a word)}}}.指定需要显示的内存，参数可以指定内存大小，显示格式，按字节/按半字/按字。
section .data: data in this section must be given symbols and types(directive). and they will be contained in executable files.
directive .ascii: define a ascii string. //指定段格式为字符串格式
directive .asciz: define a ascii string, adding the null character to the end of the define string.//定义字符串，系统会自动加上空字符在末尾，用于printf等C库函数打印。
directive .lcomm: define a buffer area. format: .lcomm buffername, size(byte) //定义一个特定大小的buffer
instruction CPUID: extract the Vendor ID string from the processor //获取供应商ID，由eax指定参数，ebx, edx, ecx,接受返回的结果
label: a tag to reference the data element. //标签，相当于变量名，用来索引特定的元素, 标签后需要添加冒号
directive: reserve a specified amount of memory. {.ascii:text string, .asciz:null-terminated string, .byte:byte value, .double:double-precision floating-point number; .float:single-precision floating-point number, .int: 32-bit integer number, .long:32-bit integer number, .short:16-bit integer number, .single:the same as .float} //定义特定大小的元素，相当于类型关键字。
directive .equ: define static symbols, set a constant value to a symbol. //定义常量，相当于c语言中的#define， 格式：.equ 符号名，值 定义后，程序无法修改这个常量
directive .fill: create one byte per field, and fill it with zeros. usage: .fill symbol name, size. //定义填充0的字节内存
section .bss: declare raw segments of memory and they will not be included in the executable files. //定义未初始化的内存片段，不用指定数据类型，并且这段内存是运行时分配的。
directive .comm: .bss's directive, usage: .comm label, size(bytes). //定义未初始化片段，给定片段索引和大小，单位是字节
directive .lcomm: local common memory area. //定义内存片段，程序外的函数将无法访问
instruction mov: moving data. usage: movx source, destination. {x:data size{l:32-bit,w:16-bit,b:8-bit}}. //mov用来移动数据，在源和目的中必然有一个是寄存器。另外一个可以是 {立即数，寄存器，内存地址，标号}。但例外情况有两种：1.可以从立即数到内存地址 2.movs指令可以从内存地址到内存地址。 通用寄存器可以相互mov， 特殊寄存器不能相互mov，只能与通用寄存器mov。
general-purpose registers:eax, ebx, ecx, edx  edi, esi, ebp, esp.
label: 当需要获取地址的值时，需要在前面加上$符号，同立即数。当需要直接索引地址时，不需要加美元符号，直接用作基地址。就是：加上美元符号表示操作地址，不加表示操作存在那个地址上的值。
label: 当用label标签来存取数组元素时，label用作基地址，而某寄存器作为数组下标，某常量代表数组元素的大小。还有一个参数是基于基地址的偏移量：label(offset, $reg, size)
register: register with prerenthese means put or get the values in the memory address contained in the register. //寄存器加上括号表示操作存在地址上的值（同不加美元符的标签）。并且在加了括号的寄存器外面指定基于寄存器指向内存地址的字节偏移量。
instruction cmov: condition move data according the values in flag register
instruction xchg: exchange values in two location without a temporary register. 交换两个寄存器 或者 一个寄存器和一个内存的值
instruction bswap: reverse the order of the bytes in register. big-endian value to little-endian value, visa versa.//改变寄存器中的字节序，大端字节序与小端字节序转换
instruction xadd: exchange the values between two registers, or a memory location and a register, add the value and store them in the destination location. usage: xadd source, destinatioin. the source must be a register. //
instruction cmpxchg: usage: cmpxchg source, destination. compare the destination operand with the value in eax, ax, or al, if equal, move the value in source to destination, if not, move the destination value will be loaded into eax, ax, or al
instruction cmpxchg8b: usage: cmpxchg8b destination
instruction pushx: push data into stack. {x:size{l:32-bit, w:16bit，b:8-bit}} //压栈，压栈的数据可以是寄存器和内存值或内存地址。（16位/32位） 或者立即数（8位，16位， 32位）.
instruction popx: pop value in stack to destination. //出栈，目标可以是寄存器或者内存中。普通寄存器可以是16位和32位，段寄存器只能是16位。内存可以是16位或者32位








